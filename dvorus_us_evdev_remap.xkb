xkb_keymap {
    xkb_keycodes  { 
        include "evdev+aliases(qwerty)"
        <LCTL> = 64;  // previous Left Alt
        <LALT> = 37;  // previous Left Alt
        <RALT> = 108; // previous AltGr
        // RCTL stays the same
    };

    xkb_types     { include "complete" };

    xkb_geometry  { include "pc(pc105)" };

    xkb_compatibility {
        include "complete"
        interpret.repeat= False;
        setMods.clearLocks= True;
        latchMods.clearLocks= True;
        latchMods.latchToLock= True;
        virtual_modifiers AltGr;
    };

    xkb_symbols {
        include "pc+inet(evdev)+terminate(ctrl_alt_bksp)"
        key <ESC> { [ Caps_Lock, Caps_Lock ] };

        virtual_modifiers AltGr;
        key <TLDE> { [ ISO_Level3_Latch ], virtualMods = AltGr };
        key <LFSH> { [ ISO_First_Group ], virtualMods= AltGr };  
        key <RTSH> { [ ISO_Last_Group ], virtualMods= AltGr  };  

        key  <AE01> { symbols [ Group1 ] = [ q            , Q            , U0308     , U0308      ]
                    };
        key  <AE02> { symbols [ Group1 ] = [ k            , K            , at        , at         ]
                    };
        key  <AE03> { symbols [ Group1 ] = [ y            , Y            , numbersign, numbersign ]
                    };
        key  <AE04> { symbols [ Group1 ] = [ u            , U            , dollar    , dollar     ]
                    };
        key  <AE05> { symbols [ Group1 ] = [ apostrophe   , bar          , ampersand , ampersand  ]
                    };

        key  <AE06>  { [ Left ] };
        key  <AE07>  { [ Right ] };

        key  <AE08> { symbols [ Group1 ] = [ d          , D          , less          , U2264               ]
                    };
        key  <AE09> { symbols [ Group1 ] = [ l          , L          , greater       , U2265               ]
                    };
        key  <AE10> { symbols [ Group1 ] = [ m          , M          , braceleft     , braceleft           ]
                    };
        key  <AE11> { symbols [ Group1 ] = [ b          , B          , braceright    , braceright          ]
                    };
        key  <AE12> { symbols [ Group1 ] = [ z          , Z          , grave         , grave               ]
                    };

        key <BKSP> { [ Tab , Tab ] };

        key <TAB>  { [  BackSpace,    BackSpace ] };

        key  <AD01>  { [ ISO_Level2_Latch ] };
        modifier_map Shift { <AD01> };

        key  <AD02> { symbols [ Group1 ] = [ s          , S          , bracketleft , bracketleft  ]
                    };
        key  <AD03> { symbols [ Group1 ] = [ o          , O          , bracketright, bracketright ]
                    };
        key  <AD04> { symbols [ Group1 ] = [ e          , E          , underscore  , underscore   ]
                    };
        key  <AD05> { symbols [ Group1 ] = [ a          , A          , backslash   , backslash    ]
                    };

        key  <AD06>  { [ Up ] };

        key  <AD07> { symbols [ Group1 ] = [ r          , R          , semicolon     , U00A0          ]
                    };// semicolon, non-breaking space
        key  <AD08> { symbols [ Group1 ] = [ n          , N          , quotedbl      , quotedbl       ]
                    };
        key  <AD09> { symbols [ Group1 ] = [ w          , W          , colon         , emdash         ]
                    };

        key <AD10> { [ ISO_Level3_Latch ], type[Group1]="ONE_LEVEL" };

        key  <AD11> { symbols [ Group1 ] = [ v              , V              , percent   , percent ]
                    };
        key  <AD12> { symbols [ Group1 ] = [ j              , J              , asciitilde, U00A0   ]
                    }; // tilde, no-break space

        key <CAPS> { [ Escape , Escape ] };

        key  <AC01> { symbols [ Group1 ] = [ period      , exclam      , period      , period       ]
                    };
        key  <AC02> { symbols [ Group1 ] = [ comma       , question    , comma       , comma        ]
                    };
        key  <AC03> { symbols [ Group1 ] = [ p           , P           , parenleft   , parenleft    ]
                    };
        key  <AC04> { symbols [ Group1 ] = [ i           , I           , asciicircum , asciicircum  ]
                    };
        key  <AC05> { symbols [ Group1 ] = [ x           , X           , parenright  , parenright   ]
                    };

        key  <AC06>  { [ Down ] };

        key  <AC07> { symbols [ Group1 ] = [ c           , C           , plus    , U00B1 ]
                    };// plus , plus-minus
        key  <AC08> { symbols [ Group1 ] = [ t           , T           , minus   , U2011 ]
                    };// minus, non-breaking hyphen
        key  <AC09> { symbols [ Group1 ] = [ h           , H           , equal   , U2260 ]
                    };// equal, not equal
        key  <AC10> { symbols [ Group1 ] = [ g           , G           , slash   , U00F7 ]
                    };
        key  <AC11> { symbols [ Group1 ] = [ f           , F           , asterisk, U00D7 ]
                    };
        
        key  <AB01> { [ 0, 0 ] };
        key  <AB02> { [ 1, 1 ] };
        key  <AB03> { [ 2, 2 ] };
        key  <AB04> { [ 3, 3 ] };
        key  <AB05> { [ 4, 4 ] };
        key  <AB06> { [ 5, 5 ] };
        key  <AB07> { [ 6, 6 ] };
        key  <AB08> { [ 7, 7 ] };
        key  <AB09> { [ 8, 8 ] };
        key  <AB10> { [ 9, 9 ] };

};
};

